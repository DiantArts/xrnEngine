#pragma once

#include <xrn/Engine/Component/Detail/BasicType.hpp>

namespace xrn::engine::component::detail {

///////////////////////////////////////////////////////////////////////////
/// \brief Basic type to abstract the basic feature of a vector3 type
/// \ingroup component
///
/// \include Vector3.hpp <xrn/Engine/Component/Detail/Vector3.hpp>
///
///////////////////////////////////////////////////////////////////////////
template <
    typename T
    , bool hasChangedFlag = true
> class Vector3
    : public ::xrn::engine::component::detail::BasicType<::glm::vec3, T, hasChangedFlag>
{

public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Static
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    EXPOSE_BASIC_TYPE_METHODS(::glm::vec3, T, hasChangedFlag);

    using Type = ::glm::vec3;
    using ParentType = T;



public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Constructors
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    explicit Vector3(
        Vector3::Type value
    );



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Rule of 5
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Destructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    ~Vector3();

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Copy constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    Vector3(
        const Vector3&
    ) noexcept = delete;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Copy assign operator
    ///
    ///////////////////////////////////////////////////////////////////////////
    auto operator=(
        const Vector3&
    ) noexcept
        -> Vector3& = delete;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Move constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    Vector3(
        Vector3&&
    ) noexcept;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Move assign operator
    ///
    ///////////////////////////////////////////////////////////////////////////
    auto operator=(
        Vector3&&
    ) noexcept
        -> Vector3&;



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Setters getters
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    auto set(
        float value
    ) -> Vector3::ParentType&;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    auto set(
        float valueX
        , float valueY
        , float valueZ
    ) -> Vector3::ParentType&;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    auto setX(
        float value
    ) -> Vector3::ParentType&;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    auto setY(
        float value
    ) -> Vector3::ParentType&;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    auto setZ(
        float value
    ) -> Vector3::ParentType&;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    auto setXY(
        float valueX
        , float valueY
    ) -> Vector3::ParentType&;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    auto setXY(
        const ::glm::vec2& value
    ) -> Vector3::ParentType&;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    auto setXZ(
        float valueX
        , float valueZ
    ) -> Vector3::ParentType&;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    auto setXZ(
        const ::glm::vec2& value
    ) -> Vector3::ParentType&;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    auto setYZ(
        float valueY
        , float valueZ
    ) -> Vector3::ParentType&;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    auto setYZ(
        const ::glm::vec2& value
    ) -> Vector3::ParentType&;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto getX() const
        -> float;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto getY() const
        -> float;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto getZ() const
        -> float;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto getXY() const
        -> ::glm::vec2;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto getXZ() const
        -> ::glm::vec2;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto getYZ() const
        -> ::glm::vec2;



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Operators
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto operator<=>(
        float rhs
    ) const
        -> ::std::partial_ordering;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto operator<=>(
        const Vector3::ParentType& rhs
    ) const
        -> ::std::partial_ordering;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    auto operator=(
        float rhs
    ) -> Vector3::ParentType&;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto operator+(
        float rhs
    ) const -> ::glm::vec3;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    auto operator+=(
        float rhs
    ) -> Vector3::ParentType&;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto operator-(
        float rhs
    ) const -> ::glm::vec3;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    auto operator-=(
        float rhs
    ) -> Vector3::ParentType&;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto operator*(
        float rhs
    ) const -> ::glm::vec3;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    auto operator*=(
        float rhs
    ) -> Vector3::ParentType&;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto operator/(
        float rhs
    ) const -> ::glm::vec3;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    auto operator/=(
        float rhs
    ) -> Vector3::ParentType&;

};

} // namespace xrn::engine::component::detail

#define USING_THIS_VECTOR3(argParentType, ...) \
    using ::xrn::engine::component::detail::Vector3<argParentType VA_ARGS(__VA_ARGS__)>

#define EXPOSE_VECTOR3_METHODS(argParentType, ...) \
    EXPOSE_BASIC_TYPE_METHODS(::glm::vec3, argParentType VA_ARGS(__VA_ARGS__)); \
    USING_THIS_VECTOR3(argParentType VA_ARGS(__VA_ARGS__))::set; \
    USING_THIS_VECTOR3(argParentType VA_ARGS(__VA_ARGS__))::setX; \
    USING_THIS_VECTOR3(argParentType VA_ARGS(__VA_ARGS__))::setY; \
    USING_THIS_VECTOR3(argParentType VA_ARGS(__VA_ARGS__))::setZ; \
    USING_THIS_VECTOR3(argParentType VA_ARGS(__VA_ARGS__))::setXY; \
    USING_THIS_VECTOR3(argParentType VA_ARGS(__VA_ARGS__))::setXZ; \
    USING_THIS_VECTOR3(argParentType VA_ARGS(__VA_ARGS__))::setYZ; \
    USING_THIS_VECTOR3(argParentType VA_ARGS(__VA_ARGS__))::getX; \
    USING_THIS_VECTOR3(argParentType VA_ARGS(__VA_ARGS__))::getY; \
    USING_THIS_VECTOR3(argParentType VA_ARGS(__VA_ARGS__))::getZ; \
    USING_THIS_VECTOR3(argParentType VA_ARGS(__VA_ARGS__))::getXY; \
    USING_THIS_VECTOR3(argParentType VA_ARGS(__VA_ARGS__))::getXZ; \
    USING_THIS_VECTOR3(argParentType VA_ARGS(__VA_ARGS__))::getYZ; \
    USING_THIS_VECTOR3(argParentType VA_ARGS(__VA_ARGS__))::operator<=>; \
    USING_THIS_VECTOR3(argParentType VA_ARGS(__VA_ARGS__))::operator=; \
    USING_THIS_VECTOR3(argParentType VA_ARGS(__VA_ARGS__))::operator+; \
    USING_THIS_VECTOR3(argParentType VA_ARGS(__VA_ARGS__))::operator+=; \
    USING_THIS_VECTOR3(argParentType VA_ARGS(__VA_ARGS__))::operator-; \
    USING_THIS_VECTOR3(argParentType VA_ARGS(__VA_ARGS__))::operator-=; \
    USING_THIS_VECTOR3(argParentType VA_ARGS(__VA_ARGS__))::operator*; \
    USING_THIS_VECTOR3(argParentType VA_ARGS(__VA_ARGS__))::operator*=; \
    USING_THIS_VECTOR3(argParentType VA_ARGS(__VA_ARGS__))::operator/; \
    USING_THIS_VECTOR3(argParentType VA_ARGS(__VA_ARGS__))::operator/=

///////////////////////////////////////////////////////////////////////////
// Header-implimentation
///////////////////////////////////////////////////////////////////////////
#include <xrn/Engine/Component/Detail/Vector3.impl.hpp>
