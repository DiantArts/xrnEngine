#include <pch.hpp>
#include <xrn/Engine/Component/Scale.hpp>



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Constructors
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
///
///////////////////////////////////////////////////////////////////////////
::xrn::engine::component::Scale::Scale() = default;

///////////////////////////////////////////////////////////////////////////
///
///////////////////////////////////////////////////////////////////////////
::xrn::engine::component::Scale::Scale(
    const float scale
)
    : m_scale{ ::glm::vec3{ scale } }
    , m_isChanged{ true }
{}

///////////////////////////////////////////////////////////////////////////
///
///////////////////////////////////////////////////////////////////////////
::xrn::engine::component::Scale::Scale(
    const ::glm::vec3& scale
)
    : m_scale{ ::glm::vec3{ scale } }
    , m_isChanged{ true }
{}

///////////////////////////////////////////////////////////////////////////
///
///////////////////////////////////////////////////////////////////////////
::xrn::engine::component::Scale::Scale(
    const float scaleX
    , const float scaleY
    , const float scaleZ
)
    : m_scale{ ::glm::vec3{ scaleX, scaleY, scaleZ } }
    , m_isChanged{ true }
{}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Setters/Getters
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
void ::xrn::engine::component::Scale::scale(
    const float scale
)
{
    m_scale += ::glm::vec3{ scale };
    m_isChanged = true;
}

///////////////////////////////////////////////////////////////////////////
void ::xrn::engine::component::Scale::scale(
    const ::glm::vec3& scale
)
{
    m_scale += scale;
    m_isChanged = true;
}

///////////////////////////////////////////////////////////////////////////
void ::xrn::engine::component::Scale::scale(
    const float scaleX
    , const float scaleY
    , const float scaleZ
)
{
    m_scale += ::glm::vec3{ scaleX, scaleY, scaleZ };
    m_isChanged = true;
}

///////////////////////////////////////////////////////////////////////////
void ::xrn::engine::component::Scale::scaleX(
    const float scale
)
{
    m_scale.x += scale;
    m_isChanged = true;
}

///////////////////////////////////////////////////////////////////////////
void ::xrn::engine::component::Scale::scaleY(
    const float scale
)
{
    m_scale.y += scale;
    m_isChanged = true;
}

///////////////////////////////////////////////////////////////////////////
void ::xrn::engine::component::Scale::scaleZ(
    const float scale
)
{
    m_scale.z += scale;
    m_isChanged = true;
}

///////////////////////////////////////////////////////////////////////////
void ::xrn::engine::component::Scale::set(
    const float scale
)
{
    m_scale = ::glm::vec3{ scale };
    m_isChanged = true;
}

///////////////////////////////////////////////////////////////////////////
void ::xrn::engine::component::Scale::set(
    const ::glm::vec3& scale
)
{
    m_scale = ::std::move(scale);
    m_isChanged = true;
}

///////////////////////////////////////////////////////////////////////////
void ::xrn::engine::component::Scale::set(
    const float scaleX
    , const float scaleY
    , const float scaleZ
)
{
    m_scale = ::glm::vec3{ scaleX, scaleY, scaleZ };
    m_isChanged = true;
}

///////////////////////////////////////////////////////////////////////////
void ::xrn::engine::component::Scale::setX(
    const float scale
)
{
    m_scale.x = scale;
    m_isChanged = true;
}

///////////////////////////////////////////////////////////////////////////
void ::xrn::engine::component::Scale::setY(
    const float scale
)
{
    m_scale.y = scale;
    m_isChanged = true;
}

///////////////////////////////////////////////////////////////////////////
void ::xrn::engine::component::Scale::setZ(
    const float scale
)
{
    m_scale.z = scale;
    m_isChanged = true;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Scale::get() const
    -> const ::glm::vec3&
{
    return m_scale;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Scale::get()
    -> ::glm::vec3&
{
    return m_scale;
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Changed flag
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
///
///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Scale::isChanged() const
    -> bool
{
    return m_isChanged;
}

///////////////////////////////////////////////////////////////////////////
void ::xrn::engine::component::Scale::resetChangedFlag()
{
    m_isChanged = false;
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Comparisons
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Scale::operator<=>(
    const float other
) const
    -> ::std::partial_ordering
{
    if (auto cmp{ m_scale.x <=> other }; cmp != 0) {
        return cmp;
    }
    if (auto cmp{ m_scale.y <=> other }; cmp != 0) {
        return cmp;
    }
    return this->m_scale.z <=> other;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Scale::operator<=>(
    const ::glm::vec3& other
) const
    -> ::std::partial_ordering
{
    if (auto cmp{ m_scale.x <=> other.x }; cmp != 0) {
        return cmp;
    }
    if (auto cmp{ m_scale.y <=> other.y }; cmp != 0) {
        return cmp;
    }
    return this->m_scale.z <=> other.z;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Scale::operator<=>(
    const Scale& other
) const
    -> ::std::partial_ordering
{
    if (auto cmp{ m_scale.x <=> other.m_scale.x }; cmp != 0) {
        return cmp;
    }
    if (auto cmp{ m_scale.y <=> other.m_scale.y }; cmp != 0) {
        return cmp;
    }
    return this->m_scale.z <=> other.m_scale.z;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Scale::operator=(
    const float scale
) -> Scale&
{
    this->set(scale);
    return *this;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Scale::operator=(
    ::glm::vec3 scale
) -> Scale&
{
    this->set(::std::move(scale));
    return *this;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Scale::operator+(
    const float scale
) -> ::glm::vec3
{
    return m_scale + scale;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Scale::operator+(
    ::glm::vec3 scale
) -> ::glm::vec3
{
    return m_scale + scale;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Scale::operator+=(
    const float scale
) -> Scale&
{
    m_scale += scale;
    return *this;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Scale::operator+=(
    ::glm::vec3 scale
) -> Scale&
{
    m_scale += scale;
    return *this;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Scale::operator-(
    const float scale
) -> ::glm::vec3
{
    return m_scale - scale;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Scale::operator-(
    ::glm::vec3 scale
) -> ::glm::vec3
{
    return m_scale - scale;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Scale::operator-=(
    const float scale
) -> Scale&
{
    m_scale -= scale;
    return *this;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Scale::operator-=(
    ::glm::vec3 scale
) -> Scale&
{
    m_scale -= scale;
    return *this;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Scale::operator*(
    const float scale
) -> ::glm::vec3
{
    return m_scale * scale;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Scale::operator*(
    ::glm::vec3 scale
) -> ::glm::vec3
{
    return m_scale * scale;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Scale::operator*=(
    const float scale
) -> Scale&
{
    m_scale *= scale;
    return *this;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Scale::operator*=(
    ::glm::vec3 scale
) -> Scale&
{
    m_scale *= scale;
    return *this;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Scale::operator/(
    const float scale
) -> ::glm::vec3
{
    return m_scale / scale;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Scale::operator/(
    ::glm::vec3 scale
) -> ::glm::vec3
{
    return m_scale / scale;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Scale::operator/=(
    const float scale
) -> Scale&
{
    m_scale /= scale;
    return *this;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Scale::operator/=(
    ::glm::vec3 scale
) -> Scale&
{
    m_scale /= scale;
    return *this;
}

///////////////////////////////////////////////////////////////////////////
::xrn::engine::component::Scale::operator const ::glm::vec3&() const
{
    return m_scale;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Scale::operator*()
    -> ::glm::vec3&
{
    return m_scale;
}
