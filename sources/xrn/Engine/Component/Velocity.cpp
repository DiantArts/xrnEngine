#include <glm/geometric.hpp>
#include <pch.hpp>
#include <xrn/Engine/Component/Velocity.hpp>
#include <xrn/Engine/Component/Control.hpp>
#include <xrn/Engine/Component/Mass.hpp>
#include <xrn/Engine/Component/Acceleration.hpp>
#include <xrn/Engine/Component/Direction.hpp>



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Constructors
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
::xrn::engine::component::Velocity::Velocity()
    : ::xrn::engine::component::detail::Vector3<Velocity>{ ::glm::vec3{ 0.f, 0.f, 0.f } }
{}

///////////////////////////////////////////////////////////////////////////
::xrn::engine::component::Velocity::Velocity(
    const float value
)
    : ::xrn::engine::component::detail::Vector3<Velocity>{ ::glm::vec3{ value, value, value } }
{}

///////////////////////////////////////////////////////////////////////////
::xrn::engine::component::Velocity::Velocity(
    ::glm::vec3 value
)
    : ::xrn::engine::component::detail::Vector3<Velocity>{ ::std::move(value) }
{}

///////////////////////////////////////////////////////////////////////////
::xrn::engine::component::Velocity::Velocity(
    const float valueX
    , const float valueY
    , const float valueZ
)
    : ::xrn::engine::component::detail::Vector3<Velocity>{
        ::glm::vec3{ valueX, valueY, valueZ }
    }
{}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Update
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Velocity::updateDirection(
    const ::xrn::engine::component::Direction& direction
) -> Velocity&
{
    return this->set(::glm::length(this->get()) * ::glm::normalize(*direction));
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Velocity::applyAcceleration(
    const ::xrn::engine::component::Acceleration& acceleration
) -> Velocity&
{
    return this->add(*acceleration);
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Velocity::removeAcceleration(
    const ::xrn::engine::component::Acceleration& acceleration
) -> Velocity&
{
    return this->set(this->get() - *acceleration);
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Velocity::applyAcceleration(
    const ::xrn::Time deltaTime
    , const ::xrn::engine::component::Acceleration& acceleration
) -> Velocity&
{
    return this->add(*acceleration * deltaTime.getAsSeconds());
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Velocity::applyAcceleration(
    const ::xrn::Time deltaTime
    , const ::xrn::engine::component::Acceleration& acceleration
    , const ::xrn::engine::component::Mass& mass
) -> Velocity&
{
    return this->add((*acceleration / mass) * deltaTime.getAsSeconds());
}




///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Setters getters
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Velocity::setMaximumSpeed(
    float value
) -> Velocity&
{
    m_maximumSpeed = value;
    return *this;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Velocity::getMaximumSpeed() const
    -> float
{
    return m_maximumSpeed;
}
