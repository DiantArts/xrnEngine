#include <pch.hpp>
#include <xrn/Engine/Component/Control.hpp>
#include <xrn/Engine/Component/Transform3d.hpp>
#include <xrn/Engine/Configuration.hpp>


// ------------------------------------------------------------------ *structors

///////////////////////////////////////////////////////////////////////////
::xrn::engine::component::Control::Control(
    bool ableToFly
)
    : m_ableToFly{ ableToFly }
{}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Speed
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Control::getSpeed() const
    -> float
{
    return m_moveSpeed;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Control::setSpeed(
    float speed
) -> Control&
{
    m_moveSpeed = speed;
    return *this;
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Start moving
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Control::startMovingForward()
    -> Control&
{
    m_movementState[Control::MovementState::forward] = true;
    return *this;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Control::startMovingBackward()
    -> Control&
{
    m_movementState[Control::MovementState::backward] = true;
    return *this;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Control::startMovingRight()
    -> Control&
{
    m_movementState[Control::MovementState::right] = true;
    return *this;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Control::startMovingLeft()
    -> Control&
{
    m_movementState[Control::MovementState::left] = true;
    return *this;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Control::startMovingUp()
    -> Control&
{
    m_movementState[Control::MovementState::up] = true;
    return *this;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Control::startMovingDown()
    -> Control&
{
    m_movementState[Control::MovementState::down] = true;
    return *this;
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Stop moving
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Control::stopMovingForward()
    -> Control&
{
    m_movementState[Control::MovementState::forward] = false;
    return *this;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Control::stopMovingBackward()
    -> Control&
{
    m_movementState[Control::MovementState::backward] = false;
    return *this;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Control::stopMovingRight()
    -> Control&
{
    m_movementState[Control::MovementState::right] = false;
    return *this;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Control::stopMovingLeft()
    -> Control&
{
    m_movementState[Control::MovementState::left] = false;
    return *this;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Control::stopMovingUp()
    -> Control&
{
    m_movementState[Control::MovementState::up] = false;
    return *this;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Control::stopMovingDown()
    -> Control&
{
    m_movementState[Control::MovementState::down] = false;
    return *this;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Control::stopMoving()
    -> Control&
{
    m_movementState.reset();
    return *this;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Control::immobilize()
    -> Control&
{
    m_movementState.reset();
    return *this;
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Check if moving
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Control::isMovingForward() const
    -> bool
{
    return m_movementState.test(Control::MovementState::forward);
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Control::isMovingBackward() const
    -> bool
{
    return m_movementState.test(Control::MovementState::backward);
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Control::isMovingRight() const
    -> bool
{
    return m_movementState.test(Control::MovementState::right);
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Control::isMovingLeft() const
    -> bool
{
    return m_movementState.test(Control::MovementState::left);
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Control::isMovingUp() const
    -> bool
{
    return m_movementState.test(Control::MovementState::up);
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Control::isMovingDown() const
    -> bool
{
    return m_movementState.test(Control::MovementState::down);
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Rotation
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Control::rotate(
    const ::glm::vec3& offset
) -> Control&
{
    this->rotate(offset.x, offset.y, offset.z);
    return *this;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Control::rotate(
    const float rotationOffsetX
    , const float rotationOffsetY
    , const float rotationOffsetZ
) -> Control&
{
    this->rotateX(rotationOffsetX);
    this->rotateY(rotationOffsetY);
    this->rotateZ(rotationOffsetZ);
    return *this;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Control::rotateX(
    const float offset
) -> Control&
{
    m_rotation.x += offset * ::xrn::engine::configuration.sensitivity.x;
    return *this;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Control::rotateY(
    const float offset
) -> Control&
{
    m_rotation.y += offset * ::xrn::engine::configuration.sensitivity.y;
    return *this;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Control::rotateZ(
    const float offset
) -> Control&
{
    m_rotation.y += offset * ::xrn::engine::configuration.sensitivity.z;
    return *this;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Control::rotateAbsolute(
    ::glm::vec3 rotation
) -> Control&
{
    m_rotation = ::std::move(rotation);
    return *this;
}


///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Control::rotateAbsolute(
    const float rotationX
    , const float rotationY
    , const float rotationZ
) -> Control&
{
    return *this;
    m_rotation = ::glm::vec3{ rotationX, rotationY, rotationZ };
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Control::rotateAbsoluteX(
    const float rotationX
) -> Control&
{
    m_rotation.x = rotationX;
    return *this;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Control::rotateAbsoluteY(
    const float rotationY
) -> Control&
{
    m_rotation.y = rotationY;
    return *this;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Control::rotateAbsoluteZ(
    const float rotationZ
) -> Control&
{
    m_rotation.y = rotationZ;
    return *this;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Control::isRotated() const
    -> bool
{
    return m_rotation.x == 0.f || m_rotation.y == 0.f || m_rotation.z == 0.f;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Control::resetRotatedFlag()
    -> Control&
{
    m_rotation.x = 0.f;
    m_rotation.y = 0.f;
    m_rotation.z = 0.f;
    return *this;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Control::getRotation() const
    -> const ::glm::vec3&
{
    return m_rotation;
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Others
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Control::isAbleToFly() const
    -> bool
{
    return m_ableToFly;
}
