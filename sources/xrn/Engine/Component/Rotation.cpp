#include <pch.hpp>
#include <xrn/Engine/Component/Rotation.hpp>
#include <xrn/Engine/Component/Control.hpp>
#include <xrn/Engine/Component/Direction.hpp>
#include <xrn/Engine/Configuration.hpp>



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Constructor
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
::xrn::engine::component::Rotation::Rotation()
    : ::xrn::engine::component::detail::Vector3<Rotation>{ ::glm::vec3{ 0.f, 0.f, 0.f } }
{}

///////////////////////////////////////////////////////////////////////////
::xrn::engine::component::Rotation::Rotation(
    const float value
)
    : ::xrn::engine::component::detail::Vector3<Rotation>{ ::glm::vec3{ value, value, value } }
{}

///////////////////////////////////////////////////////////////////////////
::xrn::engine::component::Rotation::Rotation(
    ::glm::vec3 value
)
    : ::xrn::engine::component::detail::Vector3<Rotation>{ ::std::move(value) }
{}

///////////////////////////////////////////////////////////////////////////
::xrn::engine::component::Rotation::Rotation(
    const float valueX
    , const float valueY
    , const float valueZ
)
    : ::xrn::engine::component::detail::Vector3<Rotation>{
        ::glm::vec3{ valueX, valueY, valueZ }
    }
{}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Basic
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
void ::xrn::engine::component::Rotation::update(
    ::xrn::engine::component::Control& control
)
{
    this->set(this->get() + control.getRotation());
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::engine::component::Rotation::getDirection() const
    -> ::xrn::engine::component::Direction
{
    return ::xrn::engine::component::Direction{ ::glm::normalize(::glm::vec3(
        ::glm::cos(::glm::radians(this->getX())) * ::glm::cos(::glm::radians(this->getY()))
        , ::glm::sin(::glm::radians(this->getY()))
        , ::glm::sin(::glm::radians(this->getX())) * ::glm::cos(::glm::radians(this->getY()))
    )) };
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Format value
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
void ::xrn::engine::component::Rotation::formatValue(
    float& value
)
{
    while (value >= 360) {
        value -= 360;
    }
    while (value < 0) {
        value += 360;
    }
}

///////////////////////////////////////////////////////////////////////////
void ::xrn::engine::component::Rotation::formatValue(
    ::glm::vec3& value
)
{
    this->formatValue(value.x);
    this->formatValue(value.y);
    this->formatValue(value.z);
}
