#pragma once

#include <xrn/Engine/Vulkan/Device.hpp>
#include <xrn/Engine/Vulkan/Buffer.hpp>
#include <xrn/Engine/Vulkan/Hash.hpp>

namespace xrn::engine::vulkan {

///////////////////////////////////////////////////////////////////////////
/// \brief No clue what it does xD
/// \ingroup vulkan
///
/// \include Model.hpp <Model.hpp>
///
///////////////////////////////////////////////////////////////////////////
class Model {

public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Static
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    struct Vertex {
        ::glm::vec3 position{};
        ::glm::vec3 color{};
        ::glm::vec3 normal{};
        ::glm::vec2 uv{};

        [[ nodiscard ]] static auto getBindingDescriptions()
            -> ::std::vector<::VkVertexInputBindingDescription>;

        [[ nodiscard ]] static auto getAttributeDescriptions()
            -> ::std::vector<::VkVertexInputAttributeDescription>;

        [[ nodiscard ]] auto operator==(
            const Vertex &other
        ) const
            -> bool;
    };

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    struct Builder {
        ::std::vector<Vertex> vertices;
        ::std::vector<::std::uint32_t> indices;

        void loadFromFile(
            const ::std::string& filename
        );
    };

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] static auto createModelBuilder(
        const ::std::string& filename
    ) -> Model::Builder;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] static auto createFromFile(
        ::xrn::engine::vulkan::Device& device
        , const ::std::string& filename
    ) -> ::std::shared_ptr<::xrn::engine::vulkan::Model>;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] static auto createFromFile(
        ::xrn::engine::vulkan::Device* device
        , const ::std::string& filename
    ) -> ::std::shared_ptr<::xrn::engine::vulkan::Model>;

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void clearCache();



public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Constructors
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Default constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    explicit Model(
        ::xrn::engine::vulkan::Device& m_device
        , const Model::Builder& builder
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Default constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    explicit Model(
        ::xrn::engine::vulkan::Device* m_device
        , const Model::Builder& builder
    );



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Rule of 5
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Destructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    ~Model();

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Copy constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    Model(
        const Model&
    ) noexcept = delete;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Copy assign operator
    ///
    ///////////////////////////////////////////////////////////////////////////
    auto operator=(
        const Model&
    ) noexcept
        -> Model& = delete;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Move constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    Model(
        Model&&
    ) noexcept = delete;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Move assign operator
    ///
    ///////////////////////////////////////////////////////////////////////////
    auto operator=(
        Model&&
    ) noexcept
        -> Model& = delete;



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Basic
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    void bind(
        ::VkCommandBuffer commandBuffer
    );

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    void draw(
        ::VkCommandBuffer commandBuffer
    );



private:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Helpers
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    void createVertexBuffers(
        const ::std::vector<Model::Vertex>& vertices
    );

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    void createIndexBuffers(
        const ::std::vector<::std::uint32_t>& vertices
    );



private:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Static
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Cache of models
    ///
    /// \tparam Filename of the model
    /// \tparam Model loaded from the filepath
    ///
    ///////////////////////////////////////////////////////////////////////////
    static inline ::std::map<::std::string, ::std::shared_ptr<::xrn::engine::vulkan::Model>> m_modelCache;



private:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Member variables
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ::xrn::engine::vulkan::Device* m_device;

    // vertex
    ::std::unique_ptr<::xrn::engine::vulkan::Buffer> m_vertexBuffer;
    ::std::uint32_t m_vertexCount;

    // index
    bool m_hasIndexBuffer{ false };
    ::std::unique_ptr<::xrn::engine::vulkan::Buffer> m_indexBuffer;
    ::std::uint32_t m_indexCount;

};

} // namespace xrn::engine::vulkan
