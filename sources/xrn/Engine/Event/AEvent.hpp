#pragma once

namespace xrn::engine { class AScene; }

namespace xrn::engine::event {

///////////////////////////////////////////////////////////////////////////
/// \brief No clue what it does xD
/// \ingroup vulkan
///
/// \include AEvent.hpp <AEvent.hpp>
///
///////////////////////////////////////////////////////////////////////////
class AEvent {

public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Constructors
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Default constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    explicit AEvent();



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Rule of 5
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Destructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual ~AEvent() = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Copy constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    AEvent(
        const ::xrn::engine::event::AEvent&
    ) noexcept = delete;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Copy assign operator
    ///
    ///////////////////////////////////////////////////////////////////////////
    auto operator=(
        const ::xrn::engine::event::AEvent&
    ) noexcept
        -> ::xrn::engine::event::AEvent& = delete;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Move constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    AEvent(
        ::xrn::engine::event::AEvent&&
    ) noexcept;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Move assign operator
    ///
    ///////////////////////////////////////////////////////////////////////////
    auto operator=(
        ::xrn::engine::event::AEvent&&
    ) noexcept
        -> ::xrn::engine::event::AEvent&;




    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Resolve
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Resolve the event
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void resolve(
        ::xrn::engine::AScene& scene
    ) = 0;


};

} // namespace xrn::engine::event

///////////////////////////////////////////////////////////////////////////
// Constraint
///////////////////////////////////////////////////////////////////////////
namespace xrn::engine::constraint {

///////////////////////////////////////////////////////////////////////////
/// \brief Concept describing an event
///
///////////////////////////////////////////////////////////////////////////
template <
    typename Type
> concept isEvent =
   ::std::derived_from<::std::remove_cvref_t<::std::remove_pointer_t<Type>>, ::xrn::engine::event::AEvent>;

} // namespace xrn::engine::constraint

///////////////////////////////////////////////////////////////////////////
// Alias
///////////////////////////////////////////////////////////////////////////
namespace xrn::engine { using AEvent = ::xrn::engine::event::AEvent; }
